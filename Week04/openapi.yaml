openapi: 3.1.0
info:
  title: Book Management API
  version: 1.0.0
  description: Simple RESTful API for managing books

servers:
  - url: https://api.bookstore.com/v1
    description: Production server
  - url: http://localhost:5000/api
    description: Development server
  
paths:
  /books:
    get:
      summary: Get all books
      parameters:
        - name: author
          in: query
          schema:
            type: string
            description: Filter books by author
      responses:
        "200":
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreate'
      responses:
        "201":
          description: Book created successfully
          headers:
            Location:
              description: URL of the created book
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Book already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{bookId}:
    parameters:
      - $ref: '#/components/parameters/bookId'
    
    get:
      summary: Get a specific book
      responses:
        "200":
          description: Book details
          headers:
            ETag:
              description: Entity tag for caching
              schema:
                type: string
            Last-Modified:
              description: Last modification date
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "304":
          description: Not modified (cached version is current)
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a specific book
      parameters:
        - name: If-Match
          in: header
          description: ETag for optimistic concurrency control
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdate'
      responses:
        "200":
          description: Book updated successfully
          headers:
            ETag:
              description: New entity tag
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict (resource modified)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a specific book
      responses:
        "204":
          description: Book deleted successfully
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  parameters:
    bookId:
      name: bookId
      in: path
      required: true
      description: The ID of the book
      schema:
        type: integer
        example: 1

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Python Programming"
        author:
          type: string
          example: "John Doe"
        year:
          type: integer
          example: 2023
        pages:
          type: integer
          example: 350
        isbn:
          type: string
          example: "978-0123456789"
        updated:
          type: string
          format: date-time
          example: "2024-01-01T10:00:00Z"
        _links:
          $ref: '#/components/schemas/BookLinks'
    
    BookCreate:
      type: object
      required: [title, author]
      properties:
        title:
          type: string
          example: "Flask Web Development"
        author:
          type: string
          example: "Miguel Grinberg"
        year:
          type: integer
          example: 2024
        pages:
          type: integer
          example: 280
        isbn:
          type: string
          example: "978-0123456789"

    BookUpdate:
      type: object
      properties:
        title:
          type: string
          example: "Flask Web Development - 2nd Edition"
        author:
          type: string
          example: "Miguel Grinberg"
        year:
          type: integer
          example: 2024
        pages:
          type: integer
          example: 320
        isbn:
          type: string
          example: "978-0123456789"

    BookLinks:
      type: object
      properties:
        self:
          type: string
          example: "/api/books/1"
        collection:
          type: string
          example: "/api/books"
        update:
          type: string
          example: "/api/books/1"
        delete:
          type: string
          example: "/api/books/1"

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Not Found"
        message:
          type: string
          example: "Book with id 999 does not exist"
        code:
          type: string
          example: "BOOK_NOT_FOUND"
        _links:
          type: object
          properties:
            collection:
              type: string
              example: "/api/books"